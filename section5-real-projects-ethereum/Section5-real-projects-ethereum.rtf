{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fswiss\fcharset0 Helvetica-Oblique;
}
{\colortbl;\red255\green255\blue255;\red25\green60\blue255;}
{\*\expandedcolortbl;;\cssrgb\c12594\c35385\c100000;}
\margl1440\margr1440\vieww11180\viewh16080\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 10/1/21\
Ethereum & Solidity Course Notes\
https://www.udemy.com/course/ethereum-and-solidity-the-complete-developers-guide/\
Section 5- Real Projects with Ethereum\
\
115-116. Solving Real Problems with Contracts\
- problem with Kick Starter- people run off with fundraising money\
- we\'92re going to build a smart contract that controls where \
a kick starter campaign creator can send money to \
- contributors are going to send money to a ethereum smart contract\
- in order for manager to spend money, they have to create a spending request\
- spending request = attempts to withdraw money from the contract\
and send to an external address\
- all people who contribute to kickstarter campaign vote to approve spending request\
- the contributors will call a function on the contract to vote to approve request\
- if approved, funds automatically get sent to outside vendor for manager to purchase\
supplies for campaign\
\
Campaign = Crowdfund\
117. Campaign Contract Design\
- See slide 1-6-117\
- approvers = people who donated money/contributors\
- approvers array will have big issue (will have to refactor it later)\
\
\
\
126. Storage and Memory\
- Common error Messages! \
	Warning: \'93Variable is declared as storage pointer\'94\'85.\
	TypeError: \'93Memory is not implicitly convertible\'94\'85\
	- happened when I created a new variable and assigned it\
	a new custom struct object \
- Storage VS Memory\
- Sometimes storage and memory means \ul where our contract stores data\ulnone  (ex. Where it stores arrays, integers)\
	- 
\f1\b \ul Storage
\f0\b0 \ulnone  = holds data between function calls (like a computer hard drive). About\
	preserving data\
	Ex. Variable definitions initialized at top of contract\
		- persists after turning off computer!!\
	- 
\f1\b \ul Memory
\f0\b0 \ulnone  = very temporary!! (Like a computer\'92s RAM)\
	Ex. Arguments to functions (after function is complete, those variables gone)\
- Sometimes storage and memory references \ul how our solidity variables stores values in our contract\ulnone \
\
\
127. More on Storage vs Memory\
- Sometimes storage and memory references \ul how our solidity variables stores values in our contract\ulnone \
	- See StorageMemory.sol Notes\
\
\
129-130. The Wrong Way to Design the Voting System and Why its wrong!!\
- say looping through 2 arrays cost 15k gas per person (person calling approveRequest method)\
- but say we have 10k+ contributors, we have to run that loop 10k+ times!\
- could cost  = 10k gas * 10k contributors + 5k gas * 10k contributors = 100,015,000 gas!\
- array could grow without an upper limit!\
- cost could increase as array size grows!\
- very poor approach because this is expensive!!!\
- \ul when designing smart contracts, whenever you loop over an array, make sure\
That the array size will not grow to huge amounts\ulnone !!\
\
\
131. Solution to above- Mappings vs Arrays\
- 
\f1\b \ul Mappings
\f0\b0 \ulnone  = like JS objects/Python Dictionaries/Hash Tables\
	- all keys must be of the same type, and all values must be of the same type\
	- ex. Mapping (int => bool)\
- stop using arrays in our contract\
- Array worst case search time = O(N), N = length of array\
- Array average case search time = O(N)\

\f2\i - Mapping average case search time = O(1) !!!
\f0\i0 \
- Mapping worst case search time = O(N) \
\
\
132. Basics of Mappings (compared to JS)\
- 
\f1\b \cf2 \ul \ulc2 Keys are NOT stored!
\f0\b0 \cf0 \ulnone \
	- can\'92t get a list of keys\
	- Ex. Can\'92t do something like Object.keys( mapping )\
- 
\f1\b \cf2 \ul Values are NOT iterable!!
\f0\b0 \cf0 \ulnone \
	- can\'92t run loop :(\
- 
\f1\b \cf2 \ul All keys exist
\f0\b0 \cf0 \ulnone \
	- won\'92t get undefined for key that\'92s not defined like in JS\
	- default value returned for undefined key will depend on key data type\
	- if key is string, will get back empty string for undefined key\
\
\
\
140-141. Thinking About Deployment\
- Whenever we deploy a contract, we are deploying an Instance of it to the network (ex. Rinkeby)\
- Solution 1 (see slide) sucks because a user could modify the contract source code before deploying it! User deploys contract (pays for it?)\
- Solution 2- solves solution 1 security problem, but is expensive! Every time we deploy a contract, it costs money. \
- Solution 3- Hybrid\
	- before we release our application, we create a \'93\ul factory\ulnone \'94 contract\
	- it has a function to deploy a new instance of \'93Campaign\'94\
	- 
\f2\i contracts can deploy other contracts!\

\f0\i0 	- user pays deployment costs, and we have control of code being deployed!\
	- factory will also have a list of all deployed contracts\
\
\
\
QUESTIONS\
- Re: Campaign contract method createRequest, is recipient the ether address of the vendor?\
	- YES\

\f1\b \ul - Can structs have variables that are assigned functions?
\f0\b0 \ulnone \

\f1\b \ul - Can mappings have values that are functions? (Like in JS)\

\f0\b0 \ulnone - in Lecture 140, @5:24, does solution 1 mean that the contract source code is sent from a server? Not from the blockchain?\
	- looks like yes!\
\
\
\
}