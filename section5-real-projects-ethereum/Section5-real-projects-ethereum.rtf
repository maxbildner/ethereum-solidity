{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11160\viewh21400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 10/1/21\
Ethereum & Solidity Course Notes\
https://www.udemy.com/course/ethereum-and-solidity-the-complete-developers-guide/\
Section 5- Real Projects with Ethereum\
\
115-116. Solving Real Problems with Contracts\
- problem with Kick Starter- people run off with fundraising money\
- we\'92re going to build a smart contract that controls where \
a kick starter campaign creator can send money to \
- contributors are going to send money to a ethereum smart contract\
- in order for manager to spend money, they have to create a spending request\
- spending request = attempts to withdraw money from the contract\
and send to an external address\
- all people who contribute to kickstarter campaign vote to approve spending request\
- the contributors will call a function on the contract to vote to approve request\
- if approved, funds automatically get sent to outside vendor for manager to purchase\
supplies for campaign\
\
Campaign = Crowdfund\
117. Campaign Contract Design\
- See slide 1-6-117\
- approvers = people who donated money/contributors\
- approvers array will have big issue (will have to refactor it later)\
\
\
\
126. Storage and Memory\
- Common error Messages! \
	Warning: \'93Variable is declared as storage pointer\'94\'85.\
	TypeError: \'93Memory is not implicitly convertible\'94\'85\
	- happened when I created a new variable and assigned it\
	a new custom struct object \
- Storage VS Memory\
- Sometimes storage and memory means \ul where our contract stores data\ulnone  (ex. Where it stores arrays, integers)\
	- 
\f1\b \ul Storage
\f0\b0 \ulnone  = holds data between function calls (like a computer hard drive). About\
	preserving data\
	Ex. Variable definitions initialized at top of contract\
		- persists after turning off computer!!\
	- 
\f1\b \ul Memory
\f0\b0 \ulnone  = very temporary!! (Like a computer\'92s RAM)\
	Ex. Arguments to functions (after function is complete, those variables gone)\
- Sometimes storage and memory references \ul how our solidity variables stores values in our contract\ulnone \
\
\
127. More on Storage vs Memory\
- Sometimes storage and memory references \ul how our solidity variables stores values in our contract\ulnone \
	- \
\
\
QUESTIONS\
- }